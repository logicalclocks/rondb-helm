meta:
  mgmd:
    statefulSetName: mgmds
    headlessClusterIp:
      name: headless-mgmds
      port: 1186
      annotations:
        consul.hashicorp.com/service-name: mgmd
  mysqld:
    statefulSet:
      name: mysqlds
      endToEndTls: false
    service:
      name: mysqld
      port: 3306
      annotations:
        consul.hashicorp.com/service-name: mysql
        consul.hashicorp.com/service-tags: 'onlinefs'
    headlessClusterIp:
      name: headless-mysqlds
      port: 3306
    externalLoadBalancer:
      enabled: false
      class: null
      annotations: {}
    exporter:
      metricsPort: 9104
    addSysNiceCapability: true
  rdrs:
    statefulSet:
      name: rdrs
      endToEndTls: false
    serviceName: rdrs
    headlessClusterIpName: rdrs-cluster-ip
    annotations:
      consul.hashicorp.com/service-name: rdrs
      prometheus.io/path: "/metrics"
      prometheus.io/port: "4406"
      prometheus.io/scheme: "https"
      prometheus.io/scrape: "true"
    externalLoadBalancer:
      enabled: false
      class: null
      annotations: {}
    ingress:
      enabled: false
      class: nginx
      useDefaultBackend: true
      dnsNames:
      - rondb.com
      tls:
        enabled: true
        ipAddresses:
        - 127.0.0.1
staticCpuManagerPolicy: false
isMultiNodeCluster: true
terminationGracePeriodSeconds: 60
priorityClass: "ndb-high-priority"
securityContext:
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
networkPolicy:
  mgmds:
    enabled: true
    ingressSelectors: []
  ndbmtds:
    enabled: true
    ingressSelectors: []
# TODO: Consider using Chart.appVersion for tag instead
images:
  rondb:
    registry: docker.io
    repository: hopsworks
    name: rondb
    tag: latest
  toolbox:
    registry: docker.io
    repository: hopsworks
    name: hwutils
    tag: "0.5"
  dataValidation:
    registry: docker.io
    repository: ""
    name: python
    tag: 3.12-slim
  mysqldExporter:
    registry: docker.hops.works
    repository: hopsworks
    name: mysqld_exporter
    tag: 0.11.2
mysql:
  sqlInitContent: 
    ycsbTable: |
      CREATE TABLE IF NOT EXISTS ycsb.usertable (
          YCSB_KEY VARCHAR(255) PRIMARY KEY,
          FIELD0 varbinary(4096)
      );
    # This is for Helm tests
    exampleDbAccess: |
      GRANT ALL PRIVILEGES ON exampledb.* TO 'bench'@'%';
      -- Save user in RonDB (to access them on any MySQLd)
      GRANT NDB_STORED_USER ON *.* TO 'bench'@'%';
      FLUSH PRIVILEGES;
  credentialsSecretName: "mysql-passwords"
  exporter:
    enabled: false
    username: "exporter"
    maxUserConnections: 3
clusterSize:
  activeDataReplicas: 1
  numNodeGroups: 1
  minNumMySQLServers: 1
  maxNumMySQLServers: 5
  minNumRdrs: 1
  maxNumRdrs: 2
resources:
  limits:
    cpus:
      mgmds: 0.2
      ndbmtds: 2
      mysqlds: 2
      rdrs: 2
      benchs: 2
      mysqldExporters: 0.2
    memory:
      ndbmtdsMiB: 4500
      rdrsMiB: 500
      mysqldMiB: 1400
      benchsMiB: 500
      mysqldExportersMiB: 100
  requests:
    cpus:
      mgmds: 0.2
      mysqlds: 1
      rdrs: 1
      benchs: 1
      mysqldExporters: 0.02
    memory:
      rdrsMiB: 100
      mysqldMiB: 650
      benchsMiB: 100
      mysqldExportersMiB: 50
    storage:
      classes:
        default: null
        diskColumns: null
      diskColumnGiB: 2
      redoLogGiB: 2
      undoLogsGiB: 2
      slackGiB: 1
      logGiB: 2
rondbConfig:
  EmptyApiSlots: 8
  MySQLdSlotsPerNode: 4
  RdrsSlotsPerNode: 1
  RdrsMetadataSlotsPerNode: 1
  NdbmtdMemoryOverheadMiB: 1024
  InitialTablespaceSizeGiB: -1
rdrs:
  externalMetadataCluster:
    slotsPerNode: 1
    mgmds: []
tls:
  caSecretName: null
# Using minutes for easier template addition
timeoutsMinutes:
  singleSetupMySQLds: 5
  # TODO: Make this dependent on amount of data
  restoreNativeBackup: 120
benchmarking:
  enabled: false
  mysqlUsername: "bench"
  type: "sysbench"
  dbt2:
    numWarehouses: 4
    runSingle: |
      # NUM_MYSQL_SERVERS  NUM_WAREHOUSES  NUM_TERMINALS
      1                    1               1
      1                    2               1
      1                    4               1
      1                    4               2
    runMulti: |
      # NUM_MYSQL_SERVERS  NUM_WAREHOUSES  NUM_TERMINALS
      2                    1               1
      2                    2               1
      2                    2               2
  sysbench:
    threadCountsToRun: "1;2;4;8;12;16;24;32;64"
    rows: 100000
    minimizeBandwidth: false
restoreFromBackup:
  backupId: null
  pathPrefix: rondb_backup
  objectStorageProvider: s3
  excludeDatabases: []
  excludeTables: []
  s3:
    provider: "AWS"
    endpoint: null
    keyCredentialsSecret:
      name: aws-credentials
      key: key_id
    secretCredentialsSecret:
      name: aws-credentials
      key: access_key
    bucketName: rondb-helm
    region: eu-north-1
    # possible values: aws:kms, aws:kms:dsse, AES256
    serverSideEncryption: aws:kms
backups:
  enabled: false
  pathPrefix: rondb_backup
  schedule: "0 3 * * mon"
  objectStorageProvider: s3
  s3:
    provider: "AWS"
    endpoint: null
    keyCredentialsSecret:
      name: aws-credentials
      key: key_id
    secretCredentialsSecret:
      name: aws-credentials
      key: access_key
    bucketName: rondb-helm
    region: eu-north-1
    # possible values: aws:kms, aws:kms:dsse, AES256
    serverSideEncryption: aws:kms

nodeSelector:
  mysqld: {}
  ndbmtd: {}
  mgmd: {}
  rdrs: {}
  backup: {}

tolerations:
  mysqld: []
  ndbmtd: []
  mgmd: []
  rdrs: []
  backup: []