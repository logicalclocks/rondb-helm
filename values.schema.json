{
    "$schema": "https://json-schema.org/draft-07/schema#",
    "properties": {
        "isMultiNodeCluster": {
            "type": "boolean",
            "description": "Whether the Kubernetes cluster has multiple nodes; this will affect affinities and add requirements to scheduling."
        },
        "staticCpuManagerPolicy": {
            "type": "boolean",
            "description": "Whether the Kubernetes cluster has been configured with a static CPU manager policy. This is an optimization for RonDB data nodes. These have a scheduler which executes jobs within hundreds of microseconds (very quick). If the data nodes are pinned to CPUs, they can run CPU spnning to avoid context switching inbetween jobs.",
            "default": false
        },
        "terminationGracePeriodSeconds": {
            "type": "integer",
            "description": "TerminationGracePeriodSeconds for data nodes. Important for scaling down data node replicas.",
            "default": 60,
            "minimum": 10
        },
        "networkPolicy": {
            "type": "object",
            "properties": {
                "mgmds": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "default": true,
                            "description": "Whether to limit ingress for MGMd pods"
                        },
                        "ingressSelectors": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "namespaceSelector": {
                                        "$ref": "#/$defs/selector"
                                    },
                                    "podSelector": {
                                        "$ref": "#/$defs/selector"
                                    }
                                }
                            }
                        }
                    }
                },
                "ndbmtds": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "default": true,
                            "description": "Whether to limit ingress for data node pods. If there is an empty API slot in the config.ini, any host can connect to them."
                        },
                        "ingressSelectors": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "namespaceSelector": {
                                        "$ref": "#/$defs/selector"
                                    },
                                    "podSelector": {
                                        "$ref": "#/$defs/selector"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "meta": {
            "type": "object",
            "properties": {
                "mgmd": {
                    "type": "object",
                    "properties": {
                        "statefulSetName": {
                            "type": "string"
                        },
                        "headlessClusterIp": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "annotations": {
                                    "type": "object"
                                }
                            },
                            "required": [
                                "name"
                            ]
                        }
                    },
                    "required": [
                        "statefulSetName",
                        "headlessClusterIp"
                    ]
                },
                "mysqld": {
                    "type": "object",
                    "properties": {
                        "statefulSet": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "endToEndTls": {
                                    "type": "boolean",
                                    "description": "Whether to use end-to-end encryption for MySQLd pods. Since MySQLds use raw TCP connections and thereby by-pass Ingress-rules, this is generally recommended. Otherwise, Ingress-TCP can be configured directly via the Ingress controller (not in this Helmchart)."
                                }
                            },
                            "required": [
                                "name",
                                "endToEndTls"
                            ]
                        },
                        "headlessClusterIp": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "port": {
                                    "type": "integer"
                                },
                                "annotations": {
                                    "type": "object"
                                }
                            },
                            "required": [
                                "name",
                                "port"
                            ]
                        },
                        "clusterIp": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "port": {
                                    "type": "integer"
                                },
                                "annotations": {
                                    "type": "object"
                                }
                            },
                            "required": [
                                "name",
                                "port"
                            ]
                        },
                        "externalLoadBalancer": {
                            "$ref": "#/$defs/externalLoadBalancer"
                        },
                        "exporter": {
                            "type": "object",
                            "description": "Configuration for mysqld exporter",
                            "properties": {
                                "metricsPort": {
                                    "type": "integer"
                                }
                            }
                        }
                    },
                    "required": [
                        "statefulSet",
                        "headlessClusterIp",
                        "clusterIp"
                    ]
                },
                "rdrs": {
                    "type": "object",
                    "properties": {
                        "clusterIpName": {
                            "type": "string"
                        },
                        "statefulSet": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "endToEndTls": {
                                    "type": "boolean",
                                    "description": "Whether to use end-to-end encryption for RDRS pods. This is recommended for high-security use cases."
                                }
                            },
                            "required": [
                                "name",
                                "endToEndTls"
                            ]
                        },
                        "headlessClusterIpName": {
                            "type": "string"
                        },
                        "externalLoadBalancer": {
                            "$ref": "#/$defs/externalLoadBalancer"
                        },
                        "ingress": {
                            "type": "object",
                            "description": "Configuration of Ingress for RDRS",
                            "properties": {
                                "enabled": {
                                    "type": "boolean"
                                },
                                "class": {
                                    "type": "string"
                                },
                                "useDefaultBackend": {
                                    "type": "boolean",
                                    "description": "Whether to use the RDRS as a default backend for the Ingress; this makes it reachable without specifying a subdomain; i.e. an IP can be used instead."
                                },
                                "dnsNames": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "description": "DNS names used for Ingress rules. These will also be used in the TLS certificate."
                                    }
                                },
                                "tls": {
                                    "type": "object",
                                    "properties": {
                                        "enabled": {
                                            "type": "boolean",
                                            "description": "WARN: Nginx-ingress will always use encryption even if this is disabled. By enabling this, we simply have more control over the TLS Secret. The TLS Secrets are placed onto the Ingress controller instance. Ingress TLS is currently only supported with cert-manager (RonDB-standalone)"
                                        },
                                        "ipAddresses": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "description": "This will work if the a default backend is activated for the Ingress. A value here can be the external IP of the Ingress Controller"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "required": [
                        "clusterIpName",
                        "statefulSet",
                        "headlessClusterIpName"
                    ]
                },
                "binlogServers": {
                    "type": "object",
                    "properties": {
                        "statefulSet": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "endToEndTls": {
                                    "type": "boolean",
                                    "description": "Whether to use end-to-end encryption for MySQLd pods. Since MySQLds use raw TCP connections and thereby by-pass Ingress-rules, this is generally recommended. Otherwise, Ingress-TCP can be configured directly via the Ingress controller (not in this Helmchart)."
                                }
                            },
                            "required": [
                                "name",
                                "endToEndTls"
                            ]
                        },
                        "headlessClusterIp": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "port": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "name",
                                "port"
                            ]
                        },
                        "externalLoadBalancers": {
                            "$ref": "#/$defs/externalLoadBalancer"
                        }
                    },
                    "required": [
                        "statefulSet",
                        "headlessClusterIp"
                    ]
                }
            },
            "required": [
                "mgmd",
                "mysqld",
                "rdrs"
            ]
        },
        "images": {
            "type": "object",
            "description": "Information for Docker images used in the cluster",
            "properties": {
                "rondb": {
                    "$ref": "#/$defs/image"
                },
                "toolbox": {
                    "$ref": "#/$defs/image"
                },
                "dataValidation": {
                    "$ref": "#/$defs/image"
                },
                "mysqldExporter": {
                    "$ref": "#/$defs/image"
                }
            },
            "required": [
                "rondb",
                "toolbox",
                "dataValidation"
            ]
        },
        "mysql": {
            "type": "object",
            "description": "How to initialize MySQL",
            "properties": {
                "sqlInitContent": {
                    "type": "object",
                    "description": "SQL to run *only once* at cluster startup. Try to make these scripts idempotent, in case they are re-run by accident. Do so by e.g. using `IF NOT EXISTS` in the SQL commands."
                },
                "supplyOwnSecret": {
                    "type": "boolean",
                    "default": false,
                    "description": "If set to false, the Helmchart will auto-generate MySQL passwords. When running Global Replication as a secondary cluster, this should be set to true. Otherwise, the replication of ALTER root password will fail the cluster."
                },
                "clusterUser": {
                    "type": "string",
                    "description": "The MySQL user for K8s probes, benchmarks and for the standard my.cnf file."
                },
                "exporter": {
                    "type": "object",
                    "description": "MySQL exporter configuration",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "default": false
                        },
                        "username": {
                            "type": "string"
                        },
                        "maxUserConnections": {
                            "type": "integer"
                        }
                    }
                },
                "credentialsSecretName": {
                    "type": "string",
                    "description": "Secret name for MySQL users' passwords",
                    "minLength": 1
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "username": {
                                "type": "string",
                                "description": "The username of the MySQL database user.",
                                "minLength": 1
                            },
                            "host": {
                                "type": "string",
                                "description": "The host from which the MySQL user can connect.",
                                "minLength": 1
                            },
                            "privileges": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "database": {
                                            "type": "string",
                                            "description": "The MySQL database to which the privileges apply.",
                                            "minLength": 1
                                        },
                                        "tables": {
                                            "type": "object",
                                            "description": "A map of tables to their privileges.",
                                            "additionalProperties": {
                                                "type": "array",
                                                "minItems": 1,
                                                "items": {
                                                    "type": "string",
                                                    "description": "Privileges for the specific MySQL table.",
                                                    "minLength": 1
                                                }
                                            }
                                        }
                                    },
                                    "required": [
                                        "database",
                                        "tables"
                                    ],
                                    "additionalProperties": false
                                },
                                "description": "Privileges assigned to the MySQL user."
                            }
                        },
                        "required": [
                            "username",
                            "host",
                            "privileges"
                        ],
                        "additionalProperties": false
                    },
                    "description": "A list of MySQL users and their privileges."
                }
            },
            "required": [
                "sqlInitContent",
                "exporter",
                "credentialsSecretName",
                "users"
            ]
        },
        "clusterSize": {
            "type": "object",
            "description": "Horizontal cluster size",
            "properties": {
                "activeDataReplicas": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 3
                },
                "numNodeGroups": {
                    "type": "integer",
                    "minimum": 1
                },
                "minNumMySQLServers": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "A minimum amount of MySQL servers"
                },
                "maxNumMySQLServers": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "The maximum amount of MySQL servers we will auto-scale to. It is represented as number of slots in RonDB's config.ini. Changing this will only take effect if the ConfigMap for config.ini is updated and the MGMd is restarted."
                },
                "minNumRdrs": {
                    "type": "integer",
                    "minimum": 0
                },
                "maxNumRdrs": {
                    "type": "integer",
                    "minimum": 0
                }
            },
            "required": [
                "activeDataReplicas",
                "numNodeGroups",
                "minNumMySQLServers",
                "maxNumMySQLServers",
                "minNumRdrs",
                "maxNumRdrs"
            ]
        },
        "resources": {
            "type": "object",
            "description": "Vertical cluster size",
            "properties": {
                "limits": {
                    "type": "object",
                    "description": "Kubernetes resource limits",
                    "properties": {
                        "cpus": {
                            "$ref": "#/$defs/cpuResources"
                        },
                        "memory": {
                            "$ref": "#/$defs/memoryResources"
                        }
                    }
                },
                "requests": {
                    "type": "object",
                    "description": "Kubernetes resource requests; Note that data nodes will only apply limits, not requests",
                    "properties": {
                        "cpus": {
                            "$ref": "#/$defs/cpuResources"
                        },
                        "memory": {
                            "$ref": "#/$defs/memoryResources"
                        },
                        "storage": {
                            "type": "object",
                            "description": "Volume specifications",
                            "properties": {
                                "classes": {
                                    "type": "object",
                                    "description": "Storage classes",
                                    "properties": {
                                        "default": {
                                            "type": [
                                                "string",
                                                "null"
                                            ],
                                            "default": null,
                                            "description": "Default storage class name for all volumes"
                                        },
                                        "diskColumns": {
                                            "type": [
                                                "string",
                                                "null"
                                            ],
                                            "default": null,
                                            "description": "Storage class name for the data node disk columns volume"
                                        },
                                        "binlogFiles": {
                                            "type": [
                                                "string",
                                                "null"
                                            ],
                                            "default": null,
                                            "description": "Storage class name for MySQLd binlog volumes in global replication"
                                        }
                                    }
                                },
                                "diskColumnGiB": {
                                    "type": "integer",
                                    "default": 64,
                                    "minimum": 1
                                },
                                "redoLogGiB": {
                                    "type": "integer",
                                    "default": 64,
                                    "minimum": 2,
                                    "maximum": 64
                                },
                                "undoLogsGiB": {
                                    "type": "integer",
                                    "default": 64,
                                    "minimum": 1,
                                    "maximum": 128
                                },
                                "slackGiB": {
                                    "type": "integer",
                                    "description": "Extra space for data node volumes. When RonDB allocates *exactly* the given amount of space, we can run into issues.",
                                    "default": 1,
                                    "minimum": 0,
                                    "maximum": 2
                                },
                                "logGiB": {
                                    "type": "integer",
                                    "default": 2
                                },
                                "binlogGiB": {
                                    "type": "integer",
                                    "minimum": 1,
                                    "default": 2
                                },
                                "relayLogGiB": {
                                    "type": "integer",
                                    "minimum": 1,
                                    "default": 2
                                }
                            }
                        }
                    }
                }
            }
        },
        "rondbConfig": {
            "type": "object",
            "description": "Configurations for RonDB's config.ini. Memory configurations are in binary SI units (i.e. 1G = 1GiB = 1024MiB).",
            "properties": {
                "MaxNoOfTables": {
                    "type": "integer"
                },
                "MaxNoOfAttributes": {
                    "type": "integer"
                },
                "MaxNoOfTriggers": {
                    "type": "integer"
                },
                "TransactionMemory": {
                    "type": "string"
                },
                "SharedGlobalMemory": {
                    "type": "string"
                },
                "ReservedConcurrentOperations": {
                    "type": "integer"
                },
                "MaxNoOfConcurrentOperations": {
                    "type": "integer"
                },
                "MySQLdSlotsPerNode": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 4
                },
                "RdrsSlotsPerNode": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1,
                    "description": "The number of cluster connections we support via the RDRS"
                },
                "RdrsMetadataSlotsPerNode": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1,
                    "description": "We use additional cluster connections for metadata"
                },
                "EmptyApiSlots": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "We need at least 1 for the MySQLd setup job. Otherwise this is for services that are not handled here, e.g. HopsFS"
                },
                "NdbmtdMemoryOverheadMiB": {
                    "type": "integer",
                    "description": "Memory overhead for the RonDB datanode containers.",
                    "default": 1024
                },
                "InitialTablespaceSizeGiB": {
                    "type": "integer",
                    "description": "InitialTableSpace size in GiB. By default, it is set to -1, which enforces the initial tablespace to use the entire diskColumnGiB space. If set to 0, the same behaviour applies and the diskColumnGiB is used.",
                    "default": -1
                },
                "DiskPageBufferMemory": {
                    "type": "string",
                    "description": "DiskPageBufferMemory are used by disk columns. This is the page cache that contains disk pages when they are in memory. By default it is not defined."
                }
            },
            "required": [
                "MySQLdSlotsPerNode",
                "RdrsSlotsPerNode",
                "RdrsMetadataSlotsPerNode",
                "EmptyApiSlots"
            ]
        },
        "rdrs": {
            "type": "object",
            "properties": {
                "externalMetadataCluster": {
                    "type": "object",
                    "description": "RDRSs will always be in the cluster of the data, not the metadata",
                    "properties": {
                        "slotsPerNode": {
                            "type": "integer",
                            "default": 1,
                            "minimum": 1,
                            "maximum": 1
                        },
                        "mgmds": {
                            "type": "array",
                            "maxItems": 1,
                            "items": {
                                "type": "object",
                                "properties": {
                                    "ip": {
                                        "type": "string",
                                        "minLength": 1
                                    },
                                    "port": {
                                        "type": "integer",
                                        "default": 1186
                                    }
                                },
                                "required": [
                                    "ip"
                                ]
                            }
                        }
                    },
                    "required": [
                        "slotsPerNode",
                        "mgmds"
                    ]
                }
            },
            "required": [
                "externalMetadataCluster"
            ]
        },
        "tls": {
            "type": "object",
            "description": "General settings how to use encrypted TLS connections with RonDB APIs (MySQL & RDRS).",
            "properties": {
                "caSecretName": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "description": "User-provided TLS Secret. This can be used by the cert-manager as a base to sign further certificates. If not supplied, cert-manager will use a self-signed CA certificate."
                }
            }
        },
        "benchmarking": {
            "type": "object",
            "description": "Whether, which and how to run a benchmarking job on the cluster",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether to run a benchmarking job on the cluster"
                },
                "type": {
                    "description": "Which benchmarking job to run. 'Multi' refers to multiple MySQLd servers to run against",
                    "enum": [
                        "sysbench",
                        "dbt2_single",
                        "dbt2_multi",
                        "ycsb"
                    ]
                },
                "dbt2": {
                    "type": "object",
                    "description": "Configuration of DBT2 benchmarking job",
                    "properties": {
                        "numWarehouses": {
                            "type": "integer",
                            "minimum": 1
                        },
                        "runSingle": {
                            "type": "string",
                            "description": "Table with columns: NUM_MYSQL_SERVERS | NUM_WAREHOUSES | NUM_TERMINALS"
                        },
                        "runMulti": {
                            "type": "string",
                            "description": "Table with columns: NUM_MYSQL_SERVERS | NUM_WAREHOUSES | NUM_TERMINALS"
                        }
                    }
                },
                "sysbench": {
                    "type": "object",
                    "description": "Configuration of Sysbench benchmarking job",
                    "properties": {
                        "threadCountsToRun": {
                            "type": "string",
                            "description": "Semi-colon-separated list of thread counts to run"
                        },
                        "rows": {
                            "type": "integer"
                        },
                        "minimizeBandwidth": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to use filters to minimize bandwidth usage. This can be useful in cloud environments where bandwidth is expensive."
                        }
                    }
                },
                "ycsb": {
                    "type": "object",
                    "description": "Configuration of YCSB benchmarking job",
                    "properties": {
                        "schemata": {
                            "type": "string",
                            "description": "MySQL table schema to use for YCSB. NOTE: The `ycsb` database is pre-created."
                        }
                    }
                }
            },
            "required": [
                "enabled",
                "type"
            ]
        },
        "timeoutsMinutes": {
            "type": "object",
            "description": "Using minutes for easier template addition",
            "properties": {
                "singleSetupMySQLds": {
                    "type": "integer",
                    "description": "This includes the time to start a single MySQLd pod, restoring MySQL metadata and running user-defined MySQL init scripts.",
                    "default": 5
                },
                "restoreNativeBackup": {
                    "type": "integer",
                    "description": "This does not include *downloading* the native backups. IMPORTANT; Restoring native backups is NOT done in parallel yet",
                    "default": 30
                }
            },
            "required": [
                "singleSetupMySQLds",
                "restoreNativeBackup"
            ]
        },
        "restoreFromBackup": {
            "type": "object",
            "description": "Whether to restore a backup on the cluster",
            "properties": {
                "backupId": {
                    "description": "The native backup ID for the backup to restore",
                    "type": [
                        "integer",
                        "null"
                    ],
                    "minimum": 1
                },
                "pathPrefix": {
                    "description": "Prefix of RonDB backup in the configured bucket",
                    "type": "string",
                    "default": "rondb_backup"
                },
                "objectStorageProvider": {
                    "enum": [
                        "s3"
                    ],
                    "default": "s3"
                },
                "excludeDatabases": {
                    "description": "Which databases to exclude from the native backup",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "excludeTables": {
                    "description": "Which tables to exclude from the native backup. Use the format: database.table",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": []
        },
        "backups": {
            "type": "object",
            "description": "Whether, how and how often to run regular backups on the cluster",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "default": false
                },
                "pathPrefix": {
                    "description": "Prefix of RonDB backup in the configured bucket",
                    "type": "string",
                    "default": "rondb_backup"
                },
                "objectStorageProvider": {
                    "enum": [
                        "s3"
                    ],
                    "default": "s3"
                }
            },
            "required": [
                "enabled"
            ]
        },
        "globalReplication": {
            "type": "object",
            "properties": {
                "clusterNumber": {
                    "type": "number",
                    "default": 1,
                    "description": "Determines the offset for global server IDs"
                },
                "primary": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Specifies if the primary replication is enabled. This will actually create the binary log servers. Can be activated after an initial start."
                        },
                        "numBinlogServers": {
                            "type": "number",
                            "default": 2,
                            "description": "The current number of binlog servers, given global Replication is enabled."
                        },
                        "maxNumBinlogServers": {
                            "type": "number",
                            "default": 3,
                            "description": "Don't change this value. Determines how many binlog servers we can scale out to. Used to determine the server IDs for global replication. Even if replication is disabled, potential binlog servers will be written into the config.ini."
                        },
                        "expireBinlogsDays": {
                            "type": "number"
                        },
                        "logReplicaUpdates": {
                            "type": "boolean"
                        },
                        "binlogFilename": {
                            "type": "string",
                            "default": "binlog"
                        },
                        "ignoreDatabases": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "ignoreTables": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "required": [
                        "enabled",
                        "numBinlogServers",
                        "maxNumBinlogServers",
                        "expireBinlogsDays",
                        "logReplicaUpdates"
                    ],
                    "additionalProperties": false
                },
                "secondary": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "default": false
                        },
                        "replicateFrom": {
                            "type": "object",
                            "description": "RonDB clusters to replicate from. RonDB supports merge-replicating from multiple clusters, but we only support replicating from one cluster",
                            "properties": {
                                "clusterNumber": {
                                    "type": "number",
                                    "default": 1,
                                    "description": "A helper to understand from which serverIds to replicate from"
                                },
                                "binlogServerHosts": {
                                    "type": "array",
                                    "description": "Hostnames of the binlog server to replicate from. The binlog servers have headless ClusterIPs and one LoadBalancer *per* binlog server. If we replicate across different K8s clusters, we can reference the External IPs of the binlog servers' LoadBalancers here.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "default": []
                                },
                                "ignoreDatabases": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "default": []
                                },
                                "ignoreTables": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "default": []
                                }
                            },
                            "required": [
                                "binlogServerHosts"
                            ],
                            "additionalProperties": false
                        }
                    },
                    "additionalProperties": false,
                    "required": [
                        "enabled",
                        "replicateFrom"
                    ]
                }
            },
            "required": [
                "clusterNumber",
                "primary"
            ]
        },
        "nodeSelector": {
            "type": "object",
            "description": "This ensures that Kubernetes schedules pods only onto nodes that match all the specified labels.",
            "properties": {
                "mysqld": {
                    "type": "object",
                    "default": {}
                },
                "ndbmtd": {
                    "type": "object",
                    "default": {}
                },
                "mgmd": {
                    "type": "object",
                    "default": {}
                },
                "rdrs": {
                    "type": "object",
                    "default": {}
                },
                "backup": {
                    "type": "object",
                    "default": {}
                }
            }
        },
        "tolerations": {
            "type": "object",
            "description": "These tolerations allow Kubernetes to schedule pods on nodes with matching taints, ensuring proper placement based on cluster policies.",
            "properties": {
                "mysqld": {
                    "type": "array",
                    "default": []
                },
                "ndbmtd": {
                    "type": "array",
                    "default": []
                },
                "mgmd": {
                    "type": "array",
                    "default": []
                },
                "rdrs": {
                    "type": "array",
                    "default": []
                },
                "backup": {
                    "type": "array",
                    "default": []
                }
            }
        }
    },
    "required": [
        "images",
        "clusterSize",
        "resources",
        "rondbConfig",
        "timeoutsMinutes",
        "globalReplication"
    ],
    "$defs": {
        "secret": {
            "type": "object",
            "description": "",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the secret"
                },
                "key": {
                    "type": "string",
                    "description": "Key in the secret"
                }
            }
        },
        "cpuResources": {
            "type": "object",
            "description": "CPU resources per RonDB service type",
            "properties": {
                "mgmds": {
                    "type": "number"
                },
                "ndbmtds": {
                    "type": "number"
                },
                "mysqlds": {
                    "type": "number"
                },
                "rdrs": {
                    "type": "number"
                },
                "benchs": {
                    "type": "number"
                },
                "restore": {
                    "type": "number"
                },
                "mysqldExporters": {
                    "type": "number"
                }
            }
        },
        "memoryResources": {
            "type": "object",
            "description": "Memory resources per RonDB service type",
            "properties": {
                "ndbmtdsMiB": {
                    "type": "number"
                },
                "mysqldMiB": {
                    "type": "number",
                    "description": "This can usually be kept at the default independent of the load"
                },
                "rdrsMiB": {
                    "type": "number"
                },
                "benchsMiB": {
                    "type": "number"
                },
                "mysqldExportersMiB": {
                    "type": "number"
                }
            }
        },
        "image": {
            "type": "object",
            "description": "Docker image",
            "properties": {
                "registry": {
                    "type": "string",
                    "description": "Where image is hosted. Omit for local registry (E.g. use `minikube image load rondb:latest`)"
                },
                "repository": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                }
            }
        },
        "externalLoadBalancer": {
            "type": "object",
            "description": "Configuration for load balancer service to be used for external access to RDRS. ",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enabled if this flag is true or if global._hopsworks.externalLoadBalancers.enabled is true"
                },
                "class": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null,
                    "description": "Load balancer implementation class. If not defined, we fallback to global._hopsworks.externalLoadBalancers.class if defined. "
                },
                "annotations": {
                    "type": "object",
                    "description": "Cloud provider load balancer specific annotations. We merge it with the global._hopsworks.externalLoadBalancers.annotations if defined. "
                },
                "port": {
                    "type": "integer",
                    "description": "Port to expose the service on"
                }
            }
        },
        "selector": {
            "type": "object",
            "properties": {
                "matchLabels": {
                    "type": "object"
                },
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "operator": {
                                "type": "string"
                            },
                            "values": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "title": "Values",
    "type": "object"
}