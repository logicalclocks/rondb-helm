[NDBD DEFAULT] 
# RonDB default configuration is intended for execution in Cloud VMs with
# around 8 GB per VCPU. In this case it is sufficient to set nothing since
# AutomaticThreadConfig=true is default and also AutomaticMemoryConfig=true
# is default. The memory settings in this environment ensures that RonDB
# doesn't hit any memory boundaries in normal cases and at the same time
# providing large space for in-memory tables.
#
# In the Docker Compose environment we expect all nodes to execute in
# their own docker container on the same host. Thus we need to create a
# setting which works also in more limited memory environment.
#
# We set the TotalMemoryConfig to limit the amount of memory used in this
# environment. We set it to 2.5GB of memory which replicated becomes
# 5 GB of memory for data nodes.
# 
# In addition the other containers will use a bit more than 1 GB.
#
# The NumCPUs provides input to the AutomaticThreadConfig on how many
# threads to use. This will affect also memory usage, thus increasing
# this number requires also increasing the TotalMemoryConfig and
# potentially also other parameters will require changes.
#
# In a default setup the data node will run such that it uses all memory
# and all CPU available in the machine. This is the case since the default
# setup is aiming at a Cloud VM running only one data node. MySQL Servers
# and MGM servers are running in separate VMs as well.
#
# To run a benchmark on a high-end desktop with e.g. 32 CPUs one can
# set NumCPUs to 6 and increase TotalMemoryConfig a bit, for sysbench
# increasing to 4 GB of TotalMemoryConfig should be sufficient. For
# DBT2 each warehouse consumes an extra 100-200MB of memory. So running
# with e.g. 64 warehouses requires a machine with a bit more memory,
# it should work on a machine with 64 GB of memory.

# These are actually true by default anyways
AutomaticThreadConfig=true
AutomaticMemoryConfig=true

# Setting NumCPUs to 4 or some other number influences the number of
# threads of various types that we configure. In a development environment
# it is ok to set this larger than the number of actual CPUs (and smaller
# as well). In an environment where we own the entire VM it is desirable
# to not set NumCPUs such that the data node can figure out the appropriate
# number of threads according to the HW and even lock the threads to
# specific CPUs.
#
# These are exceptions to the automatic memory configuration.
# NumCPUs impacts both thread configuration and memory configuration. Thus
# raising NumCPUs means more memory is required in the data node.
NumCPUs={{ .Values.rondbConfig.NumCPUs }}
TotalMemoryConfig={{ .Values.rondbConfig.TotalMemoryConfig }}
MaxNoOfTables={{ .Values.rondbConfig.MaxNoOfTables }}
MaxNoOfAttributes={{ .Values.rondbConfig.MaxNoOfAttributes }}
MaxNoOfTriggers={{ .Values.rondbConfig.MaxNoOfTriggers }}
TransactionMemory={{ .Values.rondbConfig.TransactionMemory }}
SharedGlobalMemory={{ .Values.rondbConfig.SharedGlobalMemory }}
RedoBuffer=16M
ReservedConcurrentOperations={{ .Values.rondbConfig.ReservedConcurrentOperations }}

## Uncomment this for RonDB 22.10 and reduce TotalMemoryConfig by 250M
# ReplicationMemory=50M
# SchemaMemory=200M

# Decrease the REDO log files from 64GB to 2GB
# Size of the REDO log is NoOfFragmentLogParts * NoOfFragmentLogFiles * FragmentLogFileSize
# A smaller REDO log means one will have to be more active in checkpointing and at really high loads 
# one needs a larger REDO log, but in development 2 GB should be quite sufficient. In production
# 64 GB is more or less always enough.
NoOfFragmentLogFiles=8
FragmentLogFileSize={{ .Values.rondbConfig.FragmentLogFileSize }}

#Number of replicas
NoOfReplicas=3

# Setting this parameter to TRUE or 1 binds IP_ADDR_ANY so that connections can be made from anywhere (for autogenerated connections). The default is FALSE (0).
TcpBind_INADDR_ANY=FALSE

MaxNoOfConcurrentOperations={{ .Values.rondbConfig.MaxNoOfConcurrentOperations }}
MaxDMLOperationsPerTransaction=32K

MaxNoOfConcurrentScans=500

#The maximum time in ms that is permitted to lapse between operations in the same transaction before the transaction is aborted.
TransactionInactiveTimeout=5000
TransactionDeadlockDetectionTimeout=5000

#0: Disables locking. This is the default value.
#1: Performs the lock after allocating memory for the process.
#2: Performs the lock before memory for the process is allocated.
# Needs root privileges
LockPagesInMainMemory=0

#SpinMethod in cloud setups the default gives better latency.
#In shared environments like this it is better to avoid spinnning.
SpinMethod=StaticSpinning

# Savings of up to 50% over noncompressed LCPs and backups
CompressedLCP=0
CompressedBackup=1

BackupLogBufferSize= 16M

# The maximum size of the memory unit to use when allocating memory for tables
MaxAllocate=32M

# Needs root privileges
ODirect=0

Numa=1

# Move this to another drive if you have a high number of ops/sec
InitialLogFileGroup=name=lg_1;undo_buffer_size=32M;undo_log_0.log:1G

# Move this to another drive to store small files in HopsFS
InitialTablespace=name=ts_1;extent_size=16M;ts_1_data_file_0.dat:2G

[MYSQLD DEFAULT]

[NDB_MGMD DEFAULT]

[TCP DEFAULT]
OverloadLimit=0

# Without this flag, ndbds could not start up if not all containers
# listed in the config.ini were running. E.g. the ndbds would try to 
# to resolve the hostname "bench_1", whereby the container "bench_1" has
# been stopped. The ndbd would not find anything, and then fail.
AllowUnresolvedHostnames=true

[NDB_MGMD]
NodeId=65
LocationDomainId=0
HostName=mgmds-0.mgmd.{{ .Release.Namespace }}.svc.cluster.local
PortNumber=1186
NodeActive=1
DataDir=/srv/hops/mysql-cluster/log
LogDestination=FILE:filename=/srv/hops/mysql-cluster/log/cluster.log,maxsize=10000000,maxfiles=6
ArbitrationRank=2

# Inactive Data nodes, to enable increase of replication level
# Hostname doesn't matter since it isn't allowed to connect to
# the cluster and before this can be done the node must be
# activated and an inactive node can change its hostname.
# Inactive nodes have NodeActive set to 0.

{{- range $nodeGroup := until ($.Values.clusterSize.numNodeGroups | int) -}}
{{- range $replica := until 3 -}}
{{- $isActive := 0 -}}
{{- if lt $replica ($.Values.clusterSize.activeDataReplicas | int) -}}
  {{- $isActive = 1 -}}
{{- end}}
{{- $offset := ( mul $nodeGroup 3) -}}
{{- $nodeId := ( add $offset (add $replica 1)) -}}
{{- $hostname := (printf "node-group-%d-%d.ndbmtd-ng-%d.%s.svc.cluster.local" 
    $nodeGroup
    $replica
    $nodeGroup
    $.Release.Namespace
) -}}
{{ include "config_ndbd" (dict
    "nodeId" $nodeId
    "nodeGroup" $nodeGroup
    "isActive" $isActive
    "hostname" $hostname
)}}
{{- end -}}
{{- end -}}

{{- range $nthServer := until ($.Values.clusterSize.maxNumMySQLServers | int) -}}
{{- range $nthConnection := until ($.Values.rondbConfig.MySQLdSlotsPerNode | int) -}}
{{- $offset := ( add 67 ( mul $nthServer $.Values.rondbConfig.MySQLdSlotsPerNode)) -}}
{{- $nodeId := add $offset (add $nthConnection) -}}
{{- $hostname := (printf "mysqlds-%d.mysqld-cluster-ip.%s.svc.cluster.local" 
    $nthServer
    $.Release.Namespace
) -}}
{{ include "config_mysqld" (dict "nodeId" $nodeId "isActive" 1 "hostname" $hostname) }}
{{- end -}}
{{- end -}}

##################
## MGMd clients ##
##################

[API]
NodeId=195
LocationDomainId=0
NodeActive=1
ArbitrationRank=1
HostName=mgmds-0.mgmd.{{ .Release.Namespace }}.svc.cluster.local

# Two just for safety
[API]
NodeId=196
LocationDomainId=0
NodeActive=1
ArbitrationRank=1
HostName=mgmds-0.mgmd.{{ .Release.Namespace }}.svc.cluster.local

{{- range $nthServer := until ($.Values.clusterSize.maxNumRdrs | int) -}}
{{- range $nthConnection := until ($.Values.rondbConfig.RdrsSlotsPerNode | int) -}}
{{- $offset := ( add 197 ( mul $nthServer $.Values.rondbConfig.RdrsSlotsPerNode)) -}}
{{- $nodeId := add $offset (add $nthConnection) -}}
{{ include "config_api" (dict 
    "nodeId" $nodeId
    "isActive" 1
    "hostname" (printf "rdrs-%d.rdrs.%s.svc.cluster.local" $nthServer $.Release.Namespace)
)}}
{{- end -}}
{{- end -}}

{{- $numRdrsSlots := ( mul $.Values.clusterSize.maxNumRdrs $.Values.rondbConfig.RdrsSlotsPerNode) -}}
{{- $baseOffset := ( add 197 $numRdrsSlots ) -}}
{{- range $nthSlot := until ($.Values.rondbConfig.EmptyApiSlots | int) -}}
{{- $nodeId := add $baseOffset (add $nthSlot) -}}
{{ include "config_api" (dict 
    "nodeId" $nodeId
    "isActive" 1
    "hostname" ""
)}}
{{- end -}}
