# Copyright (c) 2024-2025 Hopsworks AB. All rights reserved.

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.meta.rdrs.statefulSet.name }}
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: {{ .Values.meta.rdrs.headlessClusterIpName }}
  replicas: {{ .Values.clusterSize.minNumRdrs }}
  podManagementPolicy: Parallel
  selector:
    # Used by the Deployment to select and manage existing pods with the specified label
    matchLabels:
      rondbService: {{ include "rondb.labels.rondbService.rdrs" $ }}
  template:
    metadata:
      # Used to apply labels to all pods created by the Deployment
      labels:
        rondbService: {{ include "rondb.labels.rondbService.rdrs" $ }}
      annotations:
        configIniHash: {{ include "rondb.configIniHash" $ }}
    spec:
{{- include "rondb.imagePullSecrets" . | indent 6 }}
{{- include "rondb.nodeSelector" (dict "nodeSelector" $.Values.nodeSelector.rdrs) | indent 6 }}
{{- include "rondb.tolerations" (dict "tolerations" $.Values.tolerations.rdrs) | indent 6 }}
      topologySpreadConstraints:
      # Spread across nodes
      - maxSkew: 3
        topologyKey: kubernetes.io/hostname
        # If the nodes don't have a hostname label, and we force this, the pods won't be scheduled
        whenUnsatisfiable: DoNotSchedule
        minDomains: 2
        nodeAffinityPolicy: Honor
        nodeTaintsPolicy: Honor
        labelSelector:
          matchLabels:
            rondbService: {{ include "rondb.labels.rondbService.rdrs" $ }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
{{- include "rondb.affinity.preferred.ndbdAZs" $ | indent 10 }}
      initContainers:
{{ include "rondb.container.waitDatanodes" $ | indent 6 }}
{{ include "rondb.container.isDnsResolvable" $ | indent 6 }}
      containers:
      - name: rdrs
        image: {{ include "image_address" (dict "image" .Values.images.rondb) }}
        imagePullPolicy: {{ $.Values.imagePullPolicy }}
{{ include "rondb.ContainerSecurityContext" $ | indent 8 }}
        command:
          - /bin/bash
          - -c
          - |
            # This is already done in the init container, so having this
            # here is just a sanity check if the main container is restarted.
{{ include "rondb.resolveOwnIp" $ | indent 12 }}

            rdrs -config={{ include "rondb.dataDir" $ }}/rest_api.json
        ports:
          - containerPort: 4406
          - containerPort: 5406
        resources:
          limits:
            cpu: {{ .Values.resources.limits.cpus.rdrs }}
            memory: {{ .Values.resources.limits.memory.rdrsMiB }}Mi
          requests:
            cpu: {{ .Values.resources.requests.cpus.rdrs }}
            memory: {{ .Values.resources.requests.memory.rdrsMiB }}Mi
        readinessProbe:
          httpGet:
            path: "0.1.0/ping"
            port: 4406
{{ if .Values.meta.rdrs.statefulSet.endToEndTls.enabled }}
            scheme: HTTPS
{{ else }}
            scheme: HTTP
{{ end }}
          initialDelaySeconds: 5
          periodSeconds: 4
          failureThreshold: 1
          timeoutSeconds: 2
        livenessProbe:
          httpGet:
            path: "0.1.0/ping"
            port: 4406
{{ if .Values.meta.rdrs.statefulSet.endToEndTls.enabled }}
            scheme: HTTPS
{{- else }}
            scheme: HTTP
{{- end }}
          initialDelaySeconds: 5
          periodSeconds: 5
          failureThreshold: 4
          timeoutSeconds: 2
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
        volumeMounts:
        # Only mount single file, otherwise entire directory becomes read-only
        - name: rdrs-configs
          mountPath: {{ include "rondb.dataDir" $ }}/rest_api.json
          subPath: rest_api.json
{{- if .Values.meta.rdrs.statefulSet.endToEndTls.enabled }}
        - name: tls-certificates
          mountPath: "/etc/tls"
          readOnly: true
{{- end }}
      # StatefulSets work with PVCs to create a dedicated persistent volume for
      # each pod replica, ensuring that a pod always re-attaches to the same data
      # even if it is rescheduled to a different node.
      volumes:
{{- if .Values.meta.rdrs.statefulSet.endToEndTls.enabled }}
      # This will be created by the cert-manager via the Certificate CRD
      # The RDRS will therefore not start until the certificate is available
      - name: tls-certificates
        secret:
          secretName: {{ $.Values.meta.rdrs.statefulSet.endToEndTls.secretName }}
          optional: false
{{- end }}
      - name: rdrs-configs
        configMap:
          name: rdrs-configs
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rdrs-configs
  namespace: {{ .Release.Namespace }}
data:
    rest_api.json: |
{{ tpl (.Files.Get "files/configs/rest_api.json") . | indent 8 }}
---
# We need a headless service to register with the MGMd
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.meta.rdrs.headlessClusterIpName }}
  namespace: {{ .Release.Namespace }}
spec:
  # Headless service for individual DNS records for the pods
  clusterIP: None
  # So we do not rely on the readiness probe to connect to the MGMd
  publishNotReadyAddresses: true
  # Match the spec.template.metadata.labels of the StatefulSet
  selector:
    rondbService: {{ include "rondb.labels.rondbService.rdrs" $ }}
  ports:
    - name: rest
      protocol: TCP
      port: 4406
      targetPort: 4406
    - name: grpc
      protocol: TCP
      port: 5406
      targetPort: 5406
---
# This is for the Ingress controller to route traffic to the RDRS
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.meta.rdrs.clusterIp.name }}
  namespace: {{ .Release.Namespace }}
  annotations:
{{- range $k, $v := .Values.meta.rdrs.clusterIp.annotations }}
{{ $k | indent 4 }}: {{ $v | quote }}
{{- end }}
spec:
  type: ClusterIP
  selector:
    rondbService: {{ include "rondb.labels.rondbService.rdrs" $ }}
  ports:
    - name: rest
      protocol: TCP
      port: 4406
      targetPort: 4406
    - name: grpc
      protocol: TCP
      port: 5406
      targetPort: 5406
{{ if
    and (gt (.Values.clusterSize.minNumRdrs | int) 0)
    (not (eq .Values.clusterSize.minNumRdrs .Values.clusterSize.maxNumRdrs))
}}
---
# Cannot autosscale from 0 since no metrics to measure
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: rdrs
  namespace: {{ .Release.Namespace }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: {{ .Values.meta.rdrs.statefulSet.name }}
  minReplicas: {{ .Values.clusterSize.minNumRdrs }}
  maxReplicas: {{ .Values.clusterSize.maxNumRdrs }}
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
{{ .Values.rdrs.hpa.additionalMetrics | toYaml | indent 2 }}
{{ end }}
{{- if include "rdrs.loadBalancersEnabled" . }}
---
# A service for external access
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.meta.rdrs.externalLoadBalancer.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Chart.Name }}
  annotations:
{{- range $k, $v := .Values.meta.rdrs.externalLoadBalancer.annotations }}
{{ $k | indent 4 }}: {{ $v | quote }}
{{- end }}
spec:
  {{- if include "rdrs.managedLoadBalancers" . }}
  type: LoadBalancer
{{- if .Values.meta.rdrs.externalLoadBalancer.class }}
  loadBalancerClass: {{ .Values.meta.rdrs.externalLoadBalancer.class }}
{{- end }}
{{- else if include "rdrs.unmanagedLoadBalancers" . }}
  type: NodePort
{{- end }}
  selector:
    rondbService: {{ include "rondb.labels.rondbService.rdrs" $ }}
  ports:
    - name: rest
      protocol: TCP
      port: 4406
      targetPort: 4406
    - name: grpc
      protocol: TCP
      port: 5406
      targetPort: 5406
{{- end }}
