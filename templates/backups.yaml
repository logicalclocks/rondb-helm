{{- if .Values.backups.enabled -}}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: create-backup
  namespace: {{ .Release.Namespace }}
spec:
  schedule: {{ .Values.backups.schedule | quote}}
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
{{- include "rondb.SecurityContext" $ | indent 10 }}
          serviceAccountName: rondb-backups-sa
          restartPolicy: OnFailure
          initContainers:
{{ include "rondb.apiInitContainer" . | indent 10 }}
          - name: backup-metadata
            image: {{ include "image_address" (dict "image" .Values.images.toolbox) }}
            command:
            - /bin/bash
            - -c
            - |
{{ tpl (.Files.Get "files/backup_metadata_kubectl.sh") . | indent 14 }}
            env:
{{- $mysqldPodname := printf "%s-0" $.Values.meta.mysqld.statefulSetName }}
            - name: JOB_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MYSQLD_PODNAME
              value: {{ $mysqldPodname }}
            # On MySQLd Pod:
            - name: REMOTE_BACKUP_DIR
              value: /tmp/backup
            - name: LOCAL_BACKUP_DIR
              value: /home/hopsworks/schemata
            - name: RCLONE_MOUNT_FILEPATH
              value: &rawRCloneConf /home/hopsworks/rclone-raw.conf
            # This will be read by rclone
            - name: RCLONE_CONFIG
              value: /home/hopsworks/rclone.conf
{{- if eq $.Values.backups.objectStorageProvider "s3" }}
            - name: ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
{{- toYaml .Values.backups.s3.keyCredentialsSecret | nindent 18 }}
            - name: SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
{{- toYaml .Values.backups.s3.secretCredentialsSecret | nindent 18 }}
{{- end }}
            volumeMounts:
            - name: backup-configs
              mountPath: *rawRCloneConf
              subPath: rclone.conf
          # RonDB contains a native backup protocol, which is launched through
          # the mgm client. It essentially causes every datanode to create a binary
          # backup that it stores locally.
          - name: run-native-backup
            image: {{ include "image_address" (dict "image" .Values.images.rondb) }}
            command:
            - /bin/bash
            - -c
            - |
              JOB_NUMBER=$(echo $JOB_NAME | tr -d '[[:alpha:]]' | tr -d '-' | sed 's/^0*//' | cut -c -9)
              ndb_mgm --ndb-connectstring=$MGM_CONNECTSTRING -e "START BACKUP $JOB_NUMBER SNAPSHOTEND WAIT COMPLETED"
            env:
            - name: JOB_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MGM_CONNECTSTRING
              value: {{ .Values.meta.mgmd.statefulSetName }}-0.{{ .Values.meta.mgmd.headlessClusterIp.name }}.{{ .Release.Namespace }}.svc.cluster.local:1186
          containers:
          - name: upload-native-backups
            image: {{ include "image_address" (dict "image" .Values.images.toolbox) }}
            workingDir: /home/hopsworks
            command:
            - /bin/bash
            - -c
            - |
{{ tpl (.Files.Get "files/backup_upload.sh") . | indent 14 }}
            env:
            - name: JOB_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          volumes:
          - name: backup-configs
            configMap:
              name: backup-configs
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backup-configs
  namespace: {{ .Release.Namespace }}
data:
    rclone.conf: |
        [{{ .Values.backups.rcloneRemoteName }}]
{{- if eq $.Values.backups.objectStorageProvider "s3" }}
        type = s3
        provider = AWS
        access_key_id = REG_ACCESS_KEY_ID
        secret_access_key = REG_SECRET_ACCESS_KEY
        region = {{ .Values.backups.s3.region }}
        server_side_encryption = {{ .Values.backups.s3.serverSideEncryption }}
        storage_class = STANDARD
{{- end }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: rondb-backups-rb
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: rondb-backups-role
subjects:
  - kind: ServiceAccount
    name: rondb-backups-sa
    namespace: {{ .Release.Namespace }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rondb-backups-sa
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: rondb-backups-role
  namespace: {{ .Release.Namespace }}
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["pods/exec"]
    verbs: ["create"]
    resourceNames:
{{- range $nodeGroup := until ($.Values.clusterSize.numNodeGroups | int) }}
{{- range $replica := until 3 }}
    - node-group-{{ $nodeGroup }}-{{ $replica }}
{{- end }}
    - {{ $mysqldPodname }}
{{- end }}
{{- end -}}
