{{- $standardContext := . -}}  {{- /* The range will re-define the '.' operator */ -}}
{{- range $nodeGroup := until ($.Values.clusterSize.numNodeGroups | int) }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  # This will have the form of "node-group-0-0", "node-group-0-1", etc.
  name: node-group-{{ $nodeGroup }}
  namespace: {{ $.Release.Namespace }}
spec:
  serviceName: ndbmtd-ng-{{ $nodeGroup }}
  # When using a startup probe, one ndbmtd is only started after
  # the other is fully connected. However, when starting up a
  # cluster (using flag --initial), the MGMd will wait for all
  # data nodes to start at the same time.
  podManagementPolicy: Parallel
  replicas: {{ $.Values.clusterSize.activeDataReplicas }}
{{ if lt ($.Values.clusterSize.activeDataReplicas | int) 2 }}
  # Don't kill a data node if we only have 1 replica.
  # Even when we start with 2 replicas and scale down to 1,
  # whilst also scaling our replicas vertically, K8s
  # will first kill the second replica before exchanging our
  # first replica. In short: even if we start with
  # 2 replicas, we risk downtime when vertically
  # scaling.
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 1
{{ end }}
  selector:
    # Used by the Deployment to select and manage existing pods with the specified label
    matchLabels:
      rondbService: ndbmtd
      nodeGroup: {{ $nodeGroup | quote }}
  # StatefulSets work with PVCs to create a dedicated persistent volume for
  # each pod replica, ensuring that a pod always re-attaches to the same data
  # even if it is rescheduled to a different node.
  volumeClaimTemplates:
    - metadata:
        name: rondb-ndbmtd-log
      spec:
        accessModes: [ReadWriteOnce]
        resources:
          requests:
            storage: 2Gi
    - metadata:
        name: rondb-ndbmtd-disk-columns
      spec:
        accessModes: [ReadWriteOnce]
        resources:
          requests:
            storage: {{ $.Values.resources.requests.storage.diskColumnGiB }}Gi
    - metadata:
        name: rondb-ndbmtd-redo-logs
      spec:
        accessModes: [ReadWriteOnce]
        resources:
          requests:
            storage: {{ $.Values.resources.requests.storage.redoLogGiB }}Gi
    - metadata:
        name: rondb-ndbmtd-undo-logs
      spec:
        accessModes: [ReadWriteOnce]
        resources:
          requests:
            storage: {{ $.Values.resources.requests.storage.undoLogsGiB }}Gi
  # Still in beta mode (Jan 2024)
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Delete
    whenScaled: Retain
  template:
    metadata:
      # Used to apply labels to all pods created by the StatefulSet
      labels:
        rondbService: ndbmtd
        nodeGroup: {{ $nodeGroup | quote }}
    spec:
      {{- include "hopsworkslib.imagePullSecrets" $ | indent 6 }}
      affinity:
        podAntiAffinity:
{{ if not $.Values.isLocalCluster }}
          # Must be on different nodes
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: nodeGroup
                  operator: In
                  values:
                  - {{ $nodeGroup | quote }}
            topologyKey: kubernetes.io/hostname
{{ end }}
          # Can be in different zones
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: nodeGroup
                  operator: In
                  values:
                  - {{ $nodeGroup | quote }}
              topologyKey: topology.kubernetes.io/zone
      initContainers:
      - name: mgmd-dependency-check
        image: {{ include "image_registry" $standardContext }}rondb-standalone:{{ $.Values.image.tag }}
        command:
        - /bin/bash
        - -c
        - |
          MGMD_HOST=mgmds-0.mgmd.{{ $.Release.Namespace }}.svc.cluster.local
          until nslookup $MGMD_HOST; do
            echo "Waiting for $MGMD_HOST to be resolvable..."
            sleep $(((RANDOM % 2)+2))
          done
      containers:
      - name: ndbmtd
        image: {{ include "image_registry" $standardContext }}rondb-standalone:{{ $.Values.image.tag }}
        command:
        - /bin/bash
        - -c
        - |
{{ include "pre_entrypoint_ndbmtds" . | indent 10 }}
        args:
          - --agument-that-will-be-omitted
          - ndbmtd
          - --ndb-connectstring=mgmds-0.mgmd.{{ $.Release.Namespace }}.svc.cluster.local:1186
        ports:
          - containerPort: 11860
        resources:
          limits:
            cpu: {{ $.Values.resources.limits.cpus.ndbmtds }}
            memory: {{ $.Values.resources.limits.memory.ndbmtdsMiB }}Mi
          requests:
            cpu: {{ $.Values.resources.requests.cpus.ndbmtds }}
            memory: {{ $.Values.resources.requests.memory.ndbmtdsMiB }}Mi
        env:
          - name: HOST_GROUP_ID
            value: "0"
          - name: NODE_GROUP
            value: {{ $nodeGroup | quote }}
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: FILE_SYSTEM_PATH
            value: /srv/hops/mysql-cluster/ndb_data
        startupProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - |
                # Equivalent to replication factor of pod
                POD_ID=$(echo $POD_NAME | grep -o '[0-9]\+$')
                NODE_ID_OFFSET=$(($NODE_GROUP*3))
                NODE_ID=$(($NODE_ID_OFFSET+$POD_ID+1))
                ./docker/rondb_standalone/healthcheck.sh mgmds-0.mgmd.{{ $.Release.Namespace }}.svc.cluster.local:1186 $NODE_ID
          initialDelaySeconds: 15
          failureThreshold: 100
          periodSeconds: 15
          timeoutSeconds: 15
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - |
                # Equivalent to replication factor of pod
                POD_ID=$(echo $POD_NAME | grep -o '[0-9]\+$')
                NODE_ID_OFFSET=$(($NODE_GROUP*3))
                NODE_ID=$(($NODE_ID_OFFSET+$POD_ID+1))
                ./docker/rondb_standalone/healthcheck.sh mgmds-0.mgmd.{{ $.Release.Namespace }}.svc.cluster.local:1186 $NODE_ID
          initialDelaySeconds: 10
          failureThreshold: 5
          periodSeconds: 15
          timeoutSeconds: 20
        volumeMounts:
        - name: rondb-ndbmtd-log
          mountPath: /srv/hops/mysql-cluster/log
        - name: rondb-ndbmtd-disk-columns
          mountPath: /srv/hops/mysql-cluster/ndb_data_files
        - name: rondb-ndbmtd-redo-logs
          mountPath: /srv/hops/mysql-cluster/ndb_data
        - name: rondb-ndbmtd-undo-logs
          mountPath: /srv/hops/mysql-cluster/ndb_undo_files
---
apiVersion: v1
kind: Service
metadata:
  # Match the spec.serviceName
  name: ndbmtd-ng-{{ $nodeGroup }}
  namespace: {{ $.Release.Namespace }}
spec:
  # Headless service for individual DNS records for the pods
  clusterIP: None
  # So we do not rely on the readiness probe to connect to the MGMd
  publishNotReadyAddresses: true
  # Match the spec.template.metadata.labels of the StatefulSet
  selector:
    rondbService: ndbmtd
    nodeGroup: {{ $nodeGroup | quote }}
  ports:
    - protocol: TCP
      port: 11860
      targetPort: 11860
---
{{ end }}
