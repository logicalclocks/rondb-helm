apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysqlds
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: mysqld-cluster-ip
  replicas: {{ .Values.clusterSize.minNumMySQLServers }}
  selector:
    # Used by the Deployment to select and manage existing pods with the specified label
    matchLabels:
      rondbService: mysqld
  volumeClaimTemplates:
    - metadata:
        name: dbs-have-initialized
      spec:
        accessModes: [ReadWriteOnce]
        resources:
          requests:
            storage: 1Ki
  # Still in beta mode (Jan 2024)
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Delete
    whenScaled: Retain
  template:
    metadata:
      # Used to apply labels to all pods created by the Deployment
      labels:
        rondbService: mysqld
    spec:
      {{- include "rondb.imagePullSecrets" . | indent 6 }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          # Preferred on different node
          - weight: 90
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: rondbService
                  operator: In
                  values:
                  - mysqld
              topologyKey: kubernetes.io/hostname
          # Preferred in different zone
          - weight: 60
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: rondbService
                  operator: In
                  values:
                  - mysqld
              topologyKey: topology.kubernetes.io/zone
      initContainers:
      - name: datanode-dependency-check
        image: {{ include "image_registry" . }}rondb-standalone:{{ .Values.image.tag }}
        command:
        # Make sure data node has connected to MGMd
        - /bin/bash
        - -c
        - |
          until nslookup mgmds-0.mgmd.{{ .Release.Namespace }}.svc.cluster.local; do
            echo "Waiting for mgmds-0.mgmd.{{ .Release.Namespace }}.svc.cluster.local to be resolvable..."
            sleep $(((RANDOM % 2)+2))
          done

          # Wait until data node is ready
          until ./docker/rondb_standalone/healthcheck.sh mgmds-0.mgmd.{{ .Release.Namespace }}.svc.cluster.local:1186 1; do
            echo "Dependency healthcheck of ndbmtd failed. Retrying in a bit"
            sleep $(((RANDOM % 2)+2))
          done
      containers:
      - name: mysqld
        image: {{ include "image_registry" . }}rondb-standalone:{{ .Values.image.tag }}
        command:
        - /bin/bash
        - -c
        - |
{{ include "entrypoint_mysqld" . | indent 10 }}
        args:
          - --agument-that-will-be-omitted
          - mysqld
        ports:
          - containerPort: 3306
        resources:
          limits:
            cpu: {{ .Values.resources.limits.cpus.mysqlds }}
            memory: {{ .Values.resources.limits.memory.mysqlds }}
          requests:
            cpu: {{ .Values.resources.requests.cpus.mysqlds }}
            memory: {{ .Values.resources.requests.memory.mysqlds }}
        env:
          - name: HOST_GROUP_ID
            value: "0"
          # TODO: Add this to secrets
          - name: MYSQL_ROOT_PASSWORD
            value: {{ .Values.mysql.rootPassword }}
{{ if not .Values.mysql.rootPassword }}
          - name: MYSQL_ALLOW_EMPTY_PASSWORD
            value: "true"
{{ end }}
          # TODO: Add this to secrets
          - name: MYSQL_BENCH_USER
            value: {{ .Values.benchmarking.mysqlUsername }}
          - name: MYSQL_BENCH_PASSWORD
            value: {{ .Values.benchmarking.mysqlPassword }}
          - name: CONNECTIONS_PER_MYSQLD
            value: {{ .Values.rondbConfig.MySQLdSlotsPerNode | quote}}
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: MYSQL_DATABASES_INIT_FILE
            value: /etc/pod-info/database-is-initialised.txt
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - |
              set -e
              mysql --defaults-file=$RONDB_DATA_DIR/my.cnf \
                -e "SELECT 1"
          initialDelaySeconds: 10
          failureThreshold: 10
          periodSeconds: 10
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command:
              - 'mysqladmin'
              - 'ping'
              - '-uroot'
          initialDelaySeconds: 25
          failureThreshold: 6
          periodSeconds: 10
          timeoutSeconds: 2
        securityContext:
          capabilities:
            add:
              - SYS_NICE
        volumeMounts:
        # Only mount single file, otherwise entire directory becomes read-only
        - name: rondb-configs
          # Using "raw", so that we can sed NodeIds into the file
          mountPath: /srv/hops/mysql-cluster/my-raw.cnf
          subPath: my.cnf
{{ if .Values.mysql.sqlInitContent }}
        - name: sql-init-script
          mountPath: /srv/hops/docker/rondb_standalone/sql_init_scripts
{{ end }}
        - name: dbs-have-initialized
          mountPath: /etc/pod-info
      # StatefulSets work with PVCs to create a dedicated persistent volume for
      # each pod replica, ensuring that a pod always re-attaches to the same data
      # even if it is rescheduled to a different node.
      volumes:
      - name: rondb-configs
        configMap:
          name: rondb-configs
{{ if .Values.mysql.sqlInitContent }}
      - name: sql-init-script
        configMap:
          name: sql-init-script
{{ end }}
---
apiVersion: v1
kind: Service
metadata:
  # Match the spec.serviceName
  name: mysqld-cluster-ip
  namespace: {{ .Release.Namespace }}
spec:
  # Headless service for individual DNS records for the pods
  clusterIP: None
  # So we do not rely on the readiness probe to connect to the MGMd
  publishNotReadyAddresses: true
  # Match the spec.template.metadata.labels of the StatefulSet
  selector:
    rondbService: mysqld
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
---
apiVersion: v1
kind: Service
metadata:
  name: mysqld
  namespace: {{ .Release.Namespace }}
spec:
  type: LoadBalancer
  selector:
    rondbService: mysqld
  ports:
  - port: 3306
    targetPort: 3306
---
{{ if .Values.mysql.sqlInitContent }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: sql-init-script
  namespace: {{ .Release.Namespace }}
data:
    init.sql: |
{{ include "rondb.sqlInitContent" . | indent 8 }}
---
{{ end }}
{{ if not (eq .Values.clusterSize.minNumMySQLServers .Values.clusterSize.maxNumMySQLServers) }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: mysqlds
  namespace: {{ .Release.Namespace }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: mysqlds
  minReplicas: {{ .Values.clusterSize.minNumMySQLServers }}
  maxReplicas: {{ .Values.clusterSize.maxNumMySQLServers }}
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
{{ end }}
