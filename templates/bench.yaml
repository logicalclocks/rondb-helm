{{- if .Values.benchmarking.enabled -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: benchs
  namespace: {{ .Release.Namespace }}
spec:
  parallelism: 1
  template:
    spec:
      {{- include "hopsworkslib.imagePullSecrets" . | indent 6 }}
      restartPolicy: OnFailure
      initContainers:
      - name: mysqld-dependency-check
        image: {{ include "image_registry" . }}rondb-standalone:{{ .Values.image.tag }}
        command:
        # Make sure data node has connected to MGMd
        - /bin/bash
        - -c
        - |
          MGMD_HOSTNAME=mgmds-0.mgmd.{{ .Release.Namespace }}.svc.cluster.local
          until nslookup $MGMD_HOSTNAME; do
            echo "Waiting for $MGMD_HOSTNAME to be resolvable..."
            sleep $(((RANDOM % 2)+2))
          done

          until nslookup mysqld.{{ .Release.Namespace }}.svc.cluster.local; do
            echo "Waiting for mysqld.{{ .Release.Namespace }}.svc.cluster.local to be resolvable..."
            sleep $(((RANDOM % 2)+2))
          done
      containers:
      - name: bench
        image: {{ include "image_registry" . }}rondb-standalone:{{ .Values.image.tag }}
        command:
        # - Alternatively: 'sleep infinity' for manual tests
        # - If we needed to change hostname & activate API slots, we could
        # do this via the MGM client here using $HOSTNAME.
        - /bin/bash
        - -c
        - |
          # Seems like MySQLd can still take a while to start up
          sleep 10
          bench_run.sh \
            --verbose \
            --default-directory /home/mysql/benchmarks/{{ .Values.benchmarking.type }}
{{- if contains "dbt2" .Values.benchmarking.type }}
            --generate-dbt2-data
{{ end }}
          cat /home/mysql/benchmarks/{{ .Values.benchmarking.type }}/final_result.txt
        resources:
          limits:
            cpu: {{ .Values.resources.limits.cpus.benchs }}
            memory: {{ .Values.resources.limits.memory.benchsMiB }}Mi
          requests:
            cpu: {{ .Values.resources.requests.cpus.benchs }}
            memory: {{ .Values.resources.requests.memory.benchsMiB }}Mi
        env:
        volumeMounts:
        # Not important, but can help to debug benchmarks
        - name: benchmarks
          mountPath: /home/mysql/benchmarks

        - name: benchmark-configs
          mountPath: /home/mysql/benchmarks/sysbench/autobench.conf
          subPath: autobench_sysbench.conf

        - name: benchmark-configs
          mountPath: /home/mysql/benchmarks/dbt2_single/autobench.conf
          subPath: autobench_dbt2.conf
        - name: benchmark-configs
          mountPath: /home/mysql/benchmarks/dbt2_single/dbt2_run_1.conf
          subPath: dbt2_single_run.conf

        - name: benchmark-configs
          mountPath: /home/mysql/benchmarks/dbt2_multi/autobench.conf
          subPath: autobench_dbt2.conf
        - name: benchmark-configs
          mountPath: /home/mysql/benchmarks/dbt2_multi/dbt2_run_1.conf
          subPath: dbt2_multi_run.conf
    ################################################################
    # TODO: Figure out how volumes work when we run benchmarks in parallel
    #       Do they need to be accessed by multiple containers?
    #       If we print the results, the volumes are not needed anymore?
    ################################################################
      volumes:
      - name: benchmarks
        persistentVolumeClaim:
          claimName: benchmarks-claim
      - name: benchmark-configs
        configMap:
          name: benchmark-configs
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: benchmarks-claim
  namespace: {{ .Release.Namespace }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Mi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: benchmark-configs
  namespace: {{ .Release.Namespace }}
data:
    autobench_sysbench.conf: |
{{ tpl (.Files.Get "files/autobench_sysbench.conf") . | indent 8 }}
    autobench_dbt2.conf: |
{{ tpl (.Files.Get "files/autobench_dbt2.conf") . | indent 8 }}

    dbt2_single_run.conf: |
{{ tpl (.Files.Get "files/dbt2_single_run.conf") . | indent 8 }}
    dbt2_multi_run.conf: |
{{ tpl (.Files.Get "files/dbt2_multi_run.conf") . | indent 8 }}

{{- end -}}
