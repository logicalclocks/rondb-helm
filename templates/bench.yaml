{{- if .Values.benchmarking.enabled -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: benchs
  namespace: {{ .Release.Namespace }}
  labels:
    rondbService: benchmark
spec:
  parallelism: 1
  backoffLimit: 1
  template:
    metadata:
      labels:
        rondbService: benchmark
    spec:
      {{- include "hopsworkslib.imagePullSecrets" . | indent 6 }}
      # So we collect errors in case of failures
      restartPolicy: Never
      initContainers:
{{ include "rondb.apiInitContainer" . | indent 8 }}
      containers:
      - name: bench
        image: {{ include "image_address" (dict "image" .Values.images.rondb) }}
        imagePullPolicy: {{ include "hopsworkslib.imagePullPolicy" . | default "IfNotPresent" }}
        command:
        # - Alternatively: 'sleep infinity' for manual tests
        # - If we needed to change hostname & activate API slots, we could
        # do this via the MGM client here using $HOSTNAME.
        - /bin/bash
        - -c
        - |
          set -e
          BENCH_DIR=/home/mysql/benchmarks/{{ .Values.benchmarking.type }}
  
          # Setting passwords in autobench.conf file
          RAW_AUTOBENCH_FILEPATH=$BENCH_DIR/autobench-raw.conf
          AUTOBENCH_FILEPATH=$BENCH_DIR/autobench.conf
          cp $RAW_AUTOBENCH_FILEPATH $AUTOBENCH_FILEPATH
          
          sed -i "/^[ ]*MYSQL_PASSWORD/c\MYSQL_PASSWORD=$MYSQL_BENCH_PASSWORD" $AUTOBENCH_FILEPATH

          set +e
          bench_run.sh \
            --verbose \
            --default-directory $BENCH_DIR
{{- if contains "dbt2" .Values.benchmarking.type }}
            --generate-dbt2-data
{{- end }}

          exit_code=$?
          if [ $exit_code -ne 0 ]; then
            # TODO: Print different files depending on benchmark
            echo "Running benchmark script failed; showing intermediate results"
            cat $BENCH_DIR/sysbench_results/oltp_rw_0_0.res
            exit $exit_code
          else
            cat $BENCH_DIR/final_result.txt
          fi
        env:
          - name: MYSQL_BENCH_PASSWORD
            valueFrom:
              secretKeyRef:
                key: {{ .Values.benchmarking.mysqlUsername }}
                name: {{ include "rondb.mysql.usersSecretName" . }}
        resources:
          limits:
            cpu: {{ .Values.resources.limits.cpus.benchs }}
            memory: {{ .Values.resources.limits.memory.benchsMiB }}Mi
          requests:
            cpu: {{ .Values.resources.requests.cpus.benchs }}
            memory: {{ .Values.resources.requests.memory.benchsMiB }}Mi
        volumeMounts:
        # Using this so that we can fetch the results using another Pod
        - name: benchmarks
          mountPath: /home/mysql/benchmarks
        - name: benchmark-configs
          mountPath: /home/mysql/benchmarks/sysbench/autobench-raw.conf
          subPath: autobench_sysbench.conf
        - name: benchmark-configs
          mountPath: /home/mysql/benchmarks/dbt2_single/autobench-raw.conf
          subPath: autobench_dbt2.conf
        - name: benchmark-configs
          mountPath: /home/mysql/benchmarks/dbt2_single/dbt2_run_1.conf
          subPath: dbt2_single_run.conf
        - name: benchmark-configs
          mountPath: /home/mysql/benchmarks/dbt2_multi/autobench-raw.conf
          subPath: autobench_dbt2.conf
        - name: benchmark-configs
          mountPath: /home/mysql/benchmarks/dbt2_multi/dbt2_run_1.conf
          subPath: dbt2_multi_run.conf
    ################################################################
    # TODO: Figure out how volumes work when we run benchmarks in parallel
    #       Do they need to be accessed by multiple containers?
    ################################################################
      volumes:
      - name: benchmarks
        persistentVolumeClaim:
          claimName: benchmarks-claim
      - name: benchmark-configs
        configMap:
          name: benchmark-configs
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: benchmarks-claim
  namespace: {{ .Release.Namespace }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Mi
---
# Use this container to fetch results from the benchmark container
# Cannot be a sidecar since the job would not finish then
apiVersion: v1
kind: Pod
metadata:
  name: fetch-bench-results
  namespace: {{ .Release.Namespace }}
  labels:
    rondbService: benchmark-fetcher
spec:
{{- include "rondb.SecurityContext" . | indent 2 }}
{{- include "hopsworkslib.imagePullSecrets" . | indent 2 }}
  affinity:
    # We need to add this in the same node as benchs
    podAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: rondbService
            operator: In
            values:
            - benchmark
        topologyKey: kubernetes.io/hostname
  containers:
  - name: idle-results-fetcher
    image: {{ include "rondb.toolboxImage" (dict "Values" .Values "default" .default "image" .Values.images.toolbox) }}
    imagePullPolicy: {{ include "hopsworkslib.imagePullPolicy" . | default "IfNotPresent" }}
    command: ["/bin/sh", "-c", "while [ ! -f /var/run/done ]; do sleep 5; done"]
    resources:
      limits:
        cpu: 0.1
        memory: 15Mi
    volumeMounts:
    - name: benchmarks
      mountPath: /home/mysql/benchmarks
  volumes:
  - name: benchmarks
    persistentVolumeClaim:
      claimName: benchmarks-claim
  restartPolicy: OnFailure
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: benchmark-configs
  namespace: {{ .Release.Namespace }}
data:
    autobench_sysbench.conf: |
{{ tpl (.Files.Get "files/autobench_sysbench.conf") . | indent 8 }}
    autobench_dbt2.conf: |
{{ tpl (.Files.Get "files/autobench_dbt2.conf") . | indent 8 }}

    dbt2_single_run.conf: |
{{ tpl (.Files.Get "files/dbt2_single_run.conf") . | indent 8 }}
    dbt2_multi_run.conf: |
{{ tpl (.Files.Get "files/dbt2_multi_run.conf") . | indent 8 }}

{{- end -}}
