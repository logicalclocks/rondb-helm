# Copyright (c) 2024-2025 Hopsworks AB. All rights reserved.

{{ if (or 
    ( and $.Values.meta.mysqld.statefulSet.endToEndTls.enabled (not $.Values.meta.mysqld.statefulSet.endToEndTls.supplyOwnSecret ))
    ( and $.Values.meta.binlogServers.statefulSet.endToEndTls.enabled (not $.Values.meta.binlogServers.statefulSet.endToEndTls.supplyOwnSecret))
    ( and $.Values.meta.replicaAppliers.statefulSet.endToEndTls.enabled (not $.Values.meta.replicaAppliers.statefulSet.endToEndTls.supplyOwnSecret))
    ( and $.Values.meta.rdrs.statefulSet.endToEndTls.enabled (not $.Values.meta.rdrs.statefulSet.endToEndTls.supplyOwnSecret))
    (and
        $.Values.meta.rdrs.ingress.enabled
        $.Values.meta.rdrs.ingress.tls.enabled
    )) 
}}
# We don't use the cert-manager in a Hopsworks environment
# Can also reference a base TLS Secret (air-gapped environment) or Let's Encrypt
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: {{ include "rondb.certManager.issuer" $ }}
  namespace: {{ $.Release.Namespace }}
spec:
{{- if $.Values.tls.caSecretName }}
  ca:
    secretName: {{ $.Values.tls.caSecretName }}
{{- else }}
  selfSigned: {}
{{- end }}
{{- end }}
---
# /* We might reach a MySQLd Pod via the headless or non-headless ClusterIP */
{{- $mysqldDict := dict
    "certName" "mysql-cert"
    "endToEndTls" $.Values.meta.mysqld.statefulSet.endToEndTls
    "dnsNames" (list
        (include "rondb.mysqldServiceHostname" $)
        (printf "%s.%s.svc.cluster.local" $.Values.meta.mysqld.headlessClusterIp.name $.Release.Namespace)
    )
}}
{{ include "rondb.certManager.certificate.endToEnd" (deepCopy $ | mustMerge $mysqldDict) }}
---
{{- $binlogDict := dict
    "certName" "binlog-cert"
    "endToEndTls" $.Values.meta.binlogServers.statefulSet.endToEndTls
    "dnsNames" (list
        (printf "%s.%s.svc.cluster.local" $.Values.meta.binlogServers.headlessClusterIp.name $.Release.Namespace)
    )
}}
{{ include "rondb.certManager.certificate.endToEnd" (deepCopy $ | mustMerge $binlogDict) }}
---
{{- $replicaApplierDict := dict
    "certName" "replica-applier-cert"
    "endToEndTls" $.Values.meta.replicaAppliers.statefulSet.endToEndTls
    "dnsNames" (list
        (printf "%s.%s.svc.cluster.local" $.Values.meta.replicaAppliers.headlessClusterIp.name $.Release.Namespace)
    )
}}
{{ include "rondb.certManager.certificate.endToEnd" (deepCopy $ | mustMerge $replicaApplierDict) }}
---
{{- $rdrsDict := dict
    "certName" "rdrs-end-to-end-cert"
    "endToEndTls" $.Values.meta.rdrs.statefulSet.endToEndTls
    "dnsNames" (list
        (include "rondb.rdrsServiceHostname" $)
        (printf "%s.%s.svc.cluster.local" $.Values.meta.rdrs.headlessClusterIpName $.Release.Namespace)
    )
}}
{{ include "rondb.certManager.certificate.endToEnd" (deepCopy $ | mustMerge $rdrsDict) }}
