# Copyright (c) 2024-2024 Hopsworks AB. All rights reserved.

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.meta.mysqld.statefulSet.name }}
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: {{ .Values.meta.mysqld.headlessClusterIp.name }}
  replicas: {{ .Values.clusterSize.minNumMySQLServers }}
  podManagementPolicy: Parallel
  selector:
    # Used by the Deployment to select and manage existing pods with the specified label
    matchLabels:
      rondbService: {{ include "rondb.labels.rondbService.mysqld" $ }}
  # Still in beta mode (Jan 2024)
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Delete
    whenScaled: Retain
  template:
    metadata:
      # Used to apply labels to all pods created by the Deployment
      labels:
        rondbService: {{ include "rondb.labels.rondbService.mysqld" $ }}
    spec:
{{- include "rondb.imagePullSecrets" . | indent 6 }}
{{- include "rondb.nodeSelector" (dict "nodeSelector" $.Values.nodeSelector.mysqld) | indent 6 }}
{{- include "rondb.tolerations" (dict "tolerations" $.Values.tolerations.mysqld) | indent 6 }}
      serviceAccountName: {{ include "rondb.mysqldServiceAccountName" . }}
      topologySpreadConstraints:
      # Spread across nodes
      - maxSkew: 3
        topologyKey: kubernetes.io/hostname
        # If the nodes don't have a hostname label, and we force this, the pods won't be scheduled
        whenUnsatisfiable: DoNotSchedule
        minDomains: 2
        nodeAffinityPolicy: Honor
        nodeTaintsPolicy: Honor
        labelSelector:
          matchLabels:
            rondbService: {{ include "rondb.labels.rondbService.mysqld" $ }}
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
{{- include "rondb.affinity.preferred.ndbdAZs" $ | indent 10 -}}
{{- include "rondb.PodSecurityContext" . | indent 6 }}
{{- if .Values.priorityClass }}
      priorityClassName: {{ .Values.priorityClass | quote }}
{{- end  }}
      initContainers:
{{/*
    This does not actually connect to the cluster
*/}}

{{- $maxTotalMySQLds := (include "rondb.maxTotalMySQLds" $ | int) }}
{{- $clusterServerIdOffset := (mul $.Values.globalReplication.clusterNumber $maxTotalMySQLds) | int -}}
{{- $serverIds := list -}}
{{ range $i := until ($.Values.clusterSize.maxNumMySQLServers | int) -}}
{{- $serverId := (printf "%d" (add $clusterServerIdOffset 1 $i)) }}
{{- $serverIds = append $serverIds ($serverId) -}}
{{- end }}

      - name: mysqld-init-datadir
        image: {{ include "image_address" (dict "image" .Values.images.rondb) }}
{{ include "rondb.ContainerSecurityContext" $ | indent 8 }}
        command:
        - /bin/bash
        - -c
        - |
{{ tpl (.Files.Get "files/scripts/mysqld_init.sh") (deepCopy $ | mustMerge (dict
    "startingNodeId" 67
    "connectionsPerMySQLd" .Values.rondbConfig.MySQLdSlotsPerNode
    "globalServerIds" $serverIds
)) | indent 10 }}
        # TODO: Try to move over the created my.cnf file to the main container
        env:
          # This is actually already baked into the image
          - name: RONDB_DATA_DIR
            value: {{ include "rondb.dataDir" $ }}
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
        volumeMounts:
        - name: mysqld-configs
          # Using "raw", so that we can sed NodeIds into the file
          mountPath: {{ include "rondb.dataDir" $ }}/my-raw.cnf
          subPath: my.cnf
        - name: mysql-data-dir
          mountPath: {{ include "rondb.mysqldDataDir" . }}
{{/*
    Always wait for data nodes first so that timeouts are more accurate. Downloading
    the native backups happens during data node startup.
*/}}
{{ include "rondb.container.waitDatanodes" . | indent 6 }}
{{ include "rondb.container.waitSingleSetup" . | indent 6 }}
{{ include "rondb.container.isDnsResolvable" $ | indent 6 }}
      containers:
      - name: mysqld
        image: {{ include "image_address" (dict "image" .Values.images.rondb) }}
        imagePullPolicy: {{ $.Values.imagePullPolicy }}
        command:
        - /bin/bash
        - -c
        - |
          set -e

{{ include "rondb.sedMyCnfFile" (dict
    "startingNodeId" 67
    "connectionsPerMySQLd" .Values.rondbConfig.MySQLdSlotsPerNode
    "globalServerIds" $serverIds
) | indent 10 }}

          # This is already done in the init container, so having this
          # here is just a sanity check if the main container is restarted.
{{ include "rondb.resolveOwnIp" $ | indent 10 }}

          mysqld --defaults-file=$RONDB_DATA_DIR/my.cnf
        ports:
          - containerPort: 3306
        resources:
          limits:
            cpu: {{ .Values.resources.limits.cpus.mysqlds }}
            memory: {{ .Values.resources.limits.memory.mysqldMiB }}Mi
          requests:
            cpu: {{ .Values.resources.requests.cpus.mysqlds }}
            memory: {{ .Values.resources.requests.memory.mysqldMiB }}Mi
        env:
          # This is actually already baked into the image
          - name: RONDB_DATA_DIR
            value: {{ include "rondb.dataDir" $ }}
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ $.Values.mysql.credentialsSecretName }}
                key: root
          - name: MYSQL_CLUSTER_USER
            value: {{ .Values.mysql.clusterUser }}
          - name: MYSQL_CLUSTER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ $.Values.mysql.credentialsSecretName }}
                key: {{ .Values.mysql.clusterUser }}
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
{{ include "rondb.mysqld.probes" (dict "tls" $.Values.meta.mysqld.statefulSet.endToEndTls.enabled) | indent 8 }}
        securityContext:
          capabilities:
            add:
            {{ if .Values.meta.mysqld.addSysNiceCapability -}}
              - SYS_NICE
            {{- end }}
        volumeMounts:
        # Only mount single file, otherwise entire directory becomes read-only
        - name: mysqld-configs
          # Using "raw", so that we can sed NodeIds into the file
          mountPath: {{ include "rondb.dataDir" $ }}/my-raw.cnf
          subPath: my.cnf
        - name: mysqld-configs
          mountPath: {{ include "rondb.dataDir" $ }}/metadata_create.sh
          subPath: metadata_create.sh
        - name: mysql-data-dir
          mountPath: {{ include "rondb.mysqldDataDir" . }}
      # StatefulSets work with PVCs to create a dedicated persistent volume for
      # each pod replica, ensuring that a pod always re-attaches to the same data
      # even if it is rescheduled to a different node.
{{- if $.Values.meta.mysqld.statefulSet.endToEndTls.enabled }}
        - name: tls-certificates
          mountPath: /etc/tls
          readOnly: true
{{- end }}
      volumes:
      - name: mysqld-configs
        configMap:
          name: mysqld-configs
          defaultMode: 0777
      - name: mysql-data-dir
        emptyDir: {}
      - name: rclone-configs
        configMap:
          name: rclone-configs
{{- if .Values.meta.mysqld.statefulSet.endToEndTls.enabled }}
      # This will be created by the cert-manager via the Certificate CRD
      # The MySQLd will therefore not start until the certificate is available
      - name: tls-certificates
        secret:
          secretName: {{ $.Values.meta.mysqld.statefulSet.endToEndTls.secretName }}
          optional: false
{{- end }}
---
# We need a headless service to register with the MGMd
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.meta.mysqld.headlessClusterIp.name }}
  namespace: {{ .Release.Namespace }}
spec:
  # Headless service for individual DNS records for the pods
  clusterIP: None
  # So we do not rely on the readiness probe to connect to the MGMd
  publishNotReadyAddresses: true
  # Match the spec.template.metadata.labels of the StatefulSet
  selector:
    rondbService: {{ include "rondb.labels.rondbService.mysqld" $ }}
  ports:
    - protocol: TCP
      port: {{ .Values.meta.mysqld.headlessClusterIp.port }}
      targetPort: 3306
---
# This is for
# - the Ingress controller to route traffic to the MySQL server
# - connecting to a MySQLd via Consul
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.meta.mysqld.clusterIp.name }}
  namespace: {{ .Release.Namespace }}
  annotations:
    {{- range $k, $v := .Values.meta.mysqld.clusterIp.annotations }}
    {{ $k }}: {{ $v | quote }}
    {{- end }}
spec:
  type: ClusterIP
  selector:
    rondbService: {{ include "rondb.labels.rondbService.mysqld" $ }}
  ports:
  - protocol: TCP
    port: {{ .Values.meta.mysqld.clusterIp.port }}
    targetPort: 3306
---
{{ if not (eq (.Values.clusterSize.minNumMySQLServers | int) (.Values.clusterSize.maxNumMySQLServers | int)) }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: mysqlds
  namespace: {{ .Release.Namespace }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: {{ .Values.meta.mysqld.statefulSet.name }}
  minReplicas: {{ .Values.clusterSize.minNumMySQLServers }}
  maxReplicas: {{ .Values.clusterSize.maxNumMySQLServers }}
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
{{ end }}
---
{{/*
    These are the permissions to allow the MySQLds to wait for the MySQL setup
    Job to have completed.
*/}}
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ include "rondb.mysqldRole" . }}
  namespace: {{ .Release.Namespace }}
rules:
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["get", "list", "watch"]
  resourceNames: [{{ include "rondb.mysqldSetupJobName" . }}]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "rondb.mysqldServiceAccountName" . }}
  namespace: {{ .Release.Namespace }}
{{ include "rondb.serviceAccountAnnotations" $ | indent 2 }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ include "rondb.mysqldRoleBinding" . }}
  namespace: {{ .Release.Namespace }}
subjects:
- kind: ServiceAccount
  name: {{ include "rondb.mysqldServiceAccountName" . }}
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: Role
  name: {{ include "rondb.mysqldRole" . }}
  apiGroup: rbac.authorization.k8s.io
{{- if .Values.meta.mysqld.externalLoadBalancer.enabled }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.meta.mysqld.externalLoadBalancer.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Chart.Name }}
  annotations:
{{- range $k, $v := .Values.meta.mysqld.externalLoadBalancer.annotations }}
    {{ $k }}: {{ $v | quote }}
{{- end }}
spec:
  type: LoadBalancer
{{- if .Values.meta.mysqld.externalLoadBalancer.class }}
  loadBalancerClass: {{ .Values.meta.mysqld.externalLoadBalancer.class }}
{{- end }}
  selector:
    rondbService: {{ include "rondb.labels.rondbService.mysqld" $ }}
  ports:
    - protocol: TCP
      port: {{ .Values.meta.mysqld.externalLoadBalancer.port }}
      targetPort: 3306
{{- end }}
